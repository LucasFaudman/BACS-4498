from .baseobjects import *
from .common import *
from .util import extract_ips, extract_urls, standardize_by_regexes, sha256hex, extract_hosts_from_parsed_urls, run_command_with_shlex, remove_null_bytes
from magic import Magic


class Malware(SmartAttrObject, CachedPropertyObject, PostprocessableObject):
    MALWARE_DOWNLOADS_PATH = Path("./logs/malware/downloads")
    STANDARDIZE_REGEX_MALWARE = []

    def __init__(self, event) -> None:
        SmartAttrObject.__init__(self)
        CachedPropertyObject.__init__(self)
        # TODO add mw postprocessor to replace get_all_failed_malware with get_malware_remote_file
        #PostprocessableObject.__init__(self)

        self.session_id = event["session"]
        self.src_ip = event["src_ip"]
        self.shasum = event.get('shasum', "")
        self.source_address = event.get('url', "")
        self.id = (self.shasum or sha256hex(self.source_address)) #[:10]

        self.destfile = event.get('destfile')
        self.is_duplicate = event.get('duplicate')
        self.is_download = event["eventid"].startswith("cowrie.session.file_download")
        self.is_upload = event["eventid"].startswith("cowrie.session.file_upload")
        self.failed = 'failed' in event["eventid"]

    
    @property
    def filepath(self):
        """Returns path to file at self.filepath"""
        return self.MALWARE_DOWNLOADS_PATH / self.id        


    def read(self, mode="rb"):
        """Reads file at self.filepath and returns bytes or text depending on mode"""
        if self.filepath.exists():
            with self.filepath.open(mode) as f:
                return f.read()
        else:
            return b"" if "b" in mode else ""


    # Begin CachedPropertyObject properties @cachedproperty methods
    @cachedproperty
    def text(self):
        """Returns text of file at self.filepath"""
        return self.read("r")
    
        
    @cachedproperty
    def file_bytes(self):
        """Returns bytes of file at self.filepath"""
        return self.read("rb")


    @cachedproperty
    def lines(self):
        """Returns list of lines of file at self.filepath"""
        return self.text.split("\n")


    @cachedproperty
    def parsed_urls(self):
        """Returns dict of parsed urls from self.text and self.source_address"""
        urls = extract_urls(self.text)
        if self.source_address:
            urls.update(extract_urls(self.source_address))
        return urls


    @cachedproperty
    def urls(self):
        """Returns list of unique urls found in Malware text and source_address"""
        return list(self.parsed_urls.keys())
    

    @cachedproperty
    def ips(self):
        """Returns list of unique ips found in Malware text"""
        return extract_ips(self.text)
    

    @cachedproperty
    def hosts(self):
        """Returns set of unique hosts found in Malware text and source_address"""
        return extract_hosts_from_parsed_urls(self.parsed_urls.values()) + self.ips


    @cachedproperty
    def standarized_bytes(self):
        """Returns standardized bytes of Malware after calling util.standardize_malware() on self.file_bytes"""
        return standardize_by_regexes(self.file_bytes, self.STANDARDIZE_REGEX_MALWARE)
    

    @cachedproperty
    def standardized_text(self):
        """Returns standardized text of Malware after calling util.standardize_malware() on self.file_bytes"""
        return self.standarized_bytes.decode()
    

    @cachedproperty
    def standardized_hash(self):
        """Returns standardized hash of Malware after calling util.standardize_malware() on self.file_bytes"""
        return sha256hex(self.standarized_bytes)


    @cachedproperty
    def file_stats(self):
        """Returns pathlib.stat object for self.filepath if it exists"""
        if self.filepath.exists():
            return self.filepath.stat()


    @cachedproperty
    def num_bytes(self):
        """Returns size in bytes of file at self.filepath if it exists"""
        if self.filepath.exists():
            return self.file_stats.st_size


    @cachedproperty
    def mime_type(self):
        """Returns mime type using python-magic of file at self.filepath if it exists"""
        if self.filepath.exists():
            mime = Magic(mime=True)
            return mime.from_file(self.filepath)
        else:
            return ""

    @cachedproperty
    def file_cmd_output(self):
        """Returns output of running 'file' command using shlex on file at self.filepath if it exists"""
        if self.filepath.exists():
            return run_command_with_shlex("file", self.filepath)
        else:
            return ""

    @cachedproperty
    def strings_cmd_output(self):
        """Returns output of running 'strings' command using shlex on file at self.filepath if it exists"""
        if self.filepath.exists():
            return run_command_with_shlex("strings", self.filepath)
        else:
            return ""
    # End CachedPropertyObject properties @cachedproperty methods


    def __str__(self) -> str:
        return ''.join([
            f"Malware {self.id}: ",
            f"Size: {self.num_bytes} bytes ",
            f"Type: {self.mime_type} ",
            f"Downloaded by: " if self.is_download else "Uploaded by: ",
            f"{self.src_ip} ",
            f"From: {self.source_address} " if self.source_address else "",
            f"Session {self.session_id} ",
            f"Urls:{len(self.urls)}, " if self.urls else "",
            f"IPs:{len(self.ips)}" if self.ips else "",
                     
        ])


    def __repr__(self) -> str:
        return self.__str__()
    

if __name__ == "__main__":
    pass