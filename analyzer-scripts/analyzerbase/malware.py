from .common import *
from .util import extract_ips, extract_urls, standardize_malware

class Malware:
    malware_path = test_logs_path / "malware" / "downloads"
    def __init__(self, shasum) -> None:
        self.shasum = shasum
        self.filepath = self.malware_path / shasum


    def read(self, mode="rb"):
        if self.filepath.exists():
            with self.filepath.open(mode) as f:
                return f.read()
        else:
            return b"" if "b" in mode else ""

    @property
    def text(self):
        return self.read("r")
        
    @property
    def file_bytes(self):
        return self.read("rb")


    @property
    def lines(self):
        return self.text.split("\n")

    @property
    def urls(self):
        return extract_urls(self.text)
    
    @property
    def ips(self):
        return extract_ips(self.text)
    
    @property
    def standardized_text(self):
        return standardize_malware(self.file_bytes).decode()

    @property
    def standarized_bytes(self):
        return standardize_malware(self.file_bytes)
    
    @property
    def standardized_hash(self):
        return hashlib.sha256(self.standarized_bytes).hexdigest()


    def __repr__(self) -> str:
        return f"Malware {self.shasum[:10]} with {len(self.lines)} lines, {len(self.urls)} urls, {len(self.ips)} ips"
    

# def print_diff_lines(string1, string2):
#     lines1 = string1.split("\n")
#     lines2 = string2.split("\n")

#     for n, lines in enumerate(zip(lines1, lines2)):
#         if lines[0] != lines[1]:
#             print(f"Line {n}: {lines[0]} != {lines[1]}")    


# def test_standardize_malware():
#     mw1 = Malware("9972b39bdad6e973490f4988693e0d730a93a4c4968fb542bdd3b28b8393a8a4")
#     mw2 = Malware("a63b0fd571a077734a68f5955bf91986c5f39af23f1d4552e02662aa9bac0458")

#     print_diff_lines(mw1.text, mw2.text)
#     print_diff_lines(mw1.standardized_text, mw2.standardized_text)
    
#     print(mw1.standardized_hash)
#     print(mw2.standardized_hash)



            
            

# if __name__ == "__main__":
#     test_standardize_malware()