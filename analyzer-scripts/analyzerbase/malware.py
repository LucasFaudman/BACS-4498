from .common import *
from .util import extract_ips, extract_urls, standardize_malware, sha256hex

class Malware:
    malware_path = test_logs_path / "malware" / "downloads"
    def __init__(self, event) -> None:
        self.session_id = event["session"]
        self.src_ip = event["src_ip"]
        self.shasum = event.get('shasum')
        self.source_address = event.get('url')
        self.id = (self.shasum or sha256hex(self.source_address))[:10]

        self.destfile = event.get('destfile')
        self.is_duplicate = event.get('duplicate')
        self.is_download = event["eventid"].startswith("cowrie.session.file_download")
        self.is_upload = event["eventid"].startswith("cowrie.session.file_upload")
        self.failed = 'failed' in event["eventid"]


        self.filepath = self.malware_path / (self.shasum or self.id)


    def read(self, mode="rb"):
        if self.filepath.exists():
            with self.filepath.open(mode) as f:
                return f.read()
        else:
            return b"" if "b" in mode else ""

    @property
    def text(self):
        return self.read("r")
        
    @property
    def file_bytes(self):
        return self.read("rb")


    @property
    def lines(self):
        return self.text.split("\n")

    @property
    def urls(self):
        return extract_urls(self.text)
    
    @property
    def ips(self):
        return extract_ips(self.text)
    
    @property
    def standardized_text(self):
        return standardize_malware(self.file_bytes).decode()

    @property
    def standarized_bytes(self):
        return standardize_malware(self.file_bytes)
    
    @property
    def standardized_hash(self):
        return sha256hex(self.standarized_bytes)


    def __repr__(self) -> str:
        return ''.join([
            f"Malware {self.id}: "
            f"Downloaded by: " if self.is_download else "Uploaded by: ",
            f"{self.src_ip} ",
            f"From: {self.source_address} " if self.source_address else "",
            f"Session {self.session_id} ",
            f"Lines:{len(self.lines)}, ",
            f"Urls:{len(self.urls)}, " if self.urls else "",
            f"IPs:{len(self.ips)}" if self.ips else "",

                     
        ])
        

    def __str__(self) -> str:
        return self.__repr__()

if __name__ == "__main__":
    pass