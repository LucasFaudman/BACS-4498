from .common import *
from .util import extract_ips, extract_urls, standardize_malware, sha256hex

class Malware:
    malware_path = test_logs_path / "malware" / "downloads"
    def __init__(self, shasum) -> None:
        self.shasum = shasum
        self.filepath = self.malware_path / shasum


    def read(self, mode="rb"):
        if self.filepath.exists():
            with self.filepath.open(mode) as f:
                return f.read()
        else:
            return b"" if "b" in mode else ""

    @property
    def text(self):
        return self.read("r")
        
    @property
    def file_bytes(self):
        return self.read("rb")


    @property
    def lines(self):
        return self.text.split("\n")

    @property
    def urls(self):
        return extract_urls(self.text)
    
    @property
    def ips(self):
        return extract_ips(self.text)
    
    @property
    def standardized_text(self):
        return standardize_malware(self.file_bytes).decode()

    @property
    def standarized_bytes(self):
        return standardize_malware(self.file_bytes)
    
    @property
    def standardized_hash(self):
        return sha256hex(self.standarized_bytes)


    def __repr__(self) -> str:
        return f"Malware {self.shasum[:10]} with {len(self.lines)} lines, {len(self.urls)} urls, {len(self.ips)} ips"
    


if __name__ == "__main__":
    pass