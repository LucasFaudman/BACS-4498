from .baseobjects import *
from .common import *

from .util import extract_ips, extract_urls, standardize_malware, sha256hex, extract_hosts_from_parsed_urls, run_command_with_shlex
from magic import Magic




class Malware(SmartAttrObject, CachedPropertyObject):
    MALWARE_DOWNLOADS_PATH = Path("./logs/malware/downloads")

    def __init__(self, event) -> None:
        SmartAttrObject.__init__(self)
        CachedPropertyObject.__init__(self)

        self.session_id = event["session"]
        self.src_ip = event["src_ip"]
        self.shasum = event.get('shasum', "")
        self.source_address = event.get('url', "")
        self.id = (self.shasum or sha256hex(self.source_address)) #[:10]

        self.destfile = event.get('destfile')
        self.is_duplicate = event.get('duplicate')
        self.is_download = event["eventid"].startswith("cowrie.session.file_download")
        self.is_upload = event["eventid"].startswith("cowrie.session.file_upload")
        self.failed = 'failed' in event["eventid"]


        self.filepath = self.MALWARE_DOWNLOADS_PATH / self.id


    def read(self, mode="rb"):
        if self.filepath.exists():
            with self.filepath.open(mode) as f:
                return f.read()
        else:
            return b"" if "b" in mode else ""



    @cachedproperty
    def text(self):
        return self.read("r")
        
    @cachedproperty
    def file_bytes(self):
        return self.read("rb")

    @cachedproperty
    def lines(self):
        return self.text.split("\n")

    @cachedproperty
    def parsed_urls(self):
        urls = extract_urls(self.text)
        if self.source_address:
            urls.update(extract_urls(self.source_address))
        return urls
    
    @cachedproperty
    def urls(self):
        return list(self.parsed_urls.keys())
    
    @cachedproperty
    def ips(self):
        return extract_ips(self.text)
    
    @cachedproperty
    def hosts(self):
        return extract_hosts_from_parsed_urls(self.parsed_urls.values()) + self.ips
            
    @cachedproperty
    def standardized_text(self):
        return standardize_malware(self.file_bytes).decode()

    @cachedproperty
    def standarized_bytes(self):
        return standardize_malware(self.file_bytes)
    
    @cachedproperty
    def standardized_hash(self):
        return sha256hex(self.standarized_bytes)


    @cachedproperty
    def file_stats(self):
        if self.filepath.exists():
            return self.filepath.stat()


    @cachedproperty
    def num_bytes(self):
        if self.filepath.exists():
            return self.file_stats.st_size
    
    @cachedproperty
    def mime_type(self):
        if self.filepath.exists():
            mime = Magic(mime=True)
            return mime.from_file(self.filepath)

    @cachedproperty
    def file_cmd_output(self):
        return run_command_with_shlex("file", self.filepath)

    @cachedproperty
    def strings_cmd_output(self):
        return run_command_with_shlex("strings", self.filepath)


    def __str__(self) -> str:
        return ''.join([
            f"Malware {self.id}: ",
            f"Size: {self.num_bytes} bytes ",
            f"Type: {self.mime_type} ",
            f"Downloaded by: " if self.is_download else "Uploaded by: ",
            f"{self.src_ip} ",
            f"From: {self.source_address} " if self.source_address else "",
            f"Session {self.session_id} ",
            f"Urls:{len(self.urls)}, " if self.urls else "",
            f"IPs:{len(self.ips)}" if self.ips else "",
                     
        ])


    def __repr__(self) -> str:
        return self.__str__()
    

if __name__ == "__main__":
    pass